#!/usr/bin/env node

/**
 * Command dependencies.
 */

var fs = require('fs')
var inquirer = require("inquirer")
var mkdir = require("mkdirp")
var exists = fs.existsSync;


/**
 * Component name
 */

var name = process.argv.slice(3)[0]

if(name) create(name)
else {
  inquirer.prompt([
  {
    type: "input",
    name: "name",
    message: "name: "
  }, {
    type: "confirm",
    name: "material",
    message: "Use vomit material design?"
  }]).then(answers => create(answers.name))
}


/**
 * Create vomit component.
 *
 * @api private
 */

function create(name) {
  var dir = __dirname + '/' + name
  mkdir(dir)
  mkdir(dir + '/test')
  write(dir + '/test/' + name + '.js', test(name))
  write(dir + '/package.json', pkg(name))
  write(dir + '/index.js', index(name))
  write(dir + '/vomit.json', mock(name))
}


/**
 * Create package.json template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function pkg(name, version) {
  return `{
  "name": "${name}",
  "main": "index.js",
  "scripts": {
    "start" : "./node_modules/.bin/vomit-live .",
    "test": "browserify test/*.js | tape-run",
    "build" : ""
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "tape": "^4.6.0",
    "tape-run": "^2.1.3",
    "vomit-live": "github:bredele/vomit-live"
  },
  "dependencies": {
    "vomit": "github:bredele/vomit"
  }
}`
}


/**
 * Create index.js template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function index(name) {
  return `/**
 * Component dependencies.
 */

 var vomit = require('vomit')

 /**
  * Expose ${name} component
  *
  * @param {Object} data
  * @api public
  */

 module.exports = function(data) {
   return vomit\`<div class="component">
     <button aria-expanded="\${!data.expanded}">\${data.label}</button>
     <p aria-hidden="\${data.expanded}">\${data.content}</p>
   </div>\`
 }`
}


function test(name) {
  return `/**
 * Test dependencies.
 */

var test = require('tape')
var component = require('..')

test('component ${name} is a function', assert => {
  assert.plan(1)
  assert.equal(typeof component, 'function')
})
  `
}

/**
 * Create style template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function styles(name) {
  return `button {
  background: whitesmoke;
  padding: 10px 16px;
  border: 2px solid black;
  box-shadow" 0 0 6px #ccc;
}`
}

/**
 * Create data to test component.
 *
 * @param {String} name
 * @api private
 */

function mock(name) {
  return `{
  "label" : "${name} component",
  "expanded" : true,
  "content" : "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}
  `
}


/**
 * Create file.
 *
 * @param {String} path
 * @param {String} content
 * @api public
 */

function write(path, content) {
  if (exists(path)) {
    console.log('exists', path)
  } else {
    console.log('create', path);
    var writer = fs.createWriteStream(path)
    writer.write(content)
    writer.end()
  }
}
