#!/usr/bin/env node

/**
 * Command dependencies.
 */

var fs = require('fs')
var inquirer = require("inquirer")
var mkdir = require("mkdirp")
var exists = fs.existsSync;


/**
 * Component name
 */

var name = process.argv.slice(3)[0]

if(name) create(name)
else {
  inquirer.prompt([
  {
    type: "input",
    name: "name",
    message: "name: "
  }, {
    type: "confirm",
    name: "material",
    message: "Use vomit material design?"
  }]).then(answers => create(answers.name))
}


/**
 * Create vomit component.
 *
 * @api private
 */

function create(name) {
  var dir = __dirname + '/' + name
  mkdir(dir)
  mkdir(dir + '/test')
  write(dir + '/package.json', package(name))
  write(dir + '/index.js', index(name))
}


/**
 * Create package.json template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function package(name, version) {
  return `{
  "name": "${name}",
  "main": "index.js",
  "scripts": {
    "test": "browserify test/*.js | tape-run"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "tape": "^4.6.0",
    "tape-run": "^2.1.3"
  },
  "dependencies": {
    "vomit": "github:bredele/vomit"
  }
}`
}


/**
 * Create index.js template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function index(name) {
  return `/**
 * Component dependencies.
 */

 var vomit = require('vomit')

 /**
  * Expose ${name} component
  *
  * @param {Object} data
  * @api public
  */

 module.exports = function(data) {
   return vomit\`
   <button>Hello</button>
   <p aria-hidden="true">content</p>
   \`
 }`
}


/**
 * Create style template.

 * @param {String} name
 * @return {String}
 * @api private
 */

function styles(name) {
  return `button {
  background: whitesmoke;
  padding: 10px 16px;
  border: 2px solid black;
  box-shadow" 0 0 6px #ccc;
}`
}


/**
 * Create file.
 *
 * @param {String} path
 * @param {String} content
 * @api public
 */

function write(path, content) {
  if (exists(path)) {
    console.log('exists', path)
  } else {
    console.log('create', path);
    var writer = fs.createWriteStream(path)
    writer.write(content)
    writer.end()
  }
}
