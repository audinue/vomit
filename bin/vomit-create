#!/usr/bin/env node

/**
 * Command dependencies.
 */

var fs = require('fs')
var relative = require('path').relative
var join = require('path').join
var inquirer = require("inquirer")
var mkdir = require("mkdirp")
var chalk = require('chalk')
var conf = require('../package.json')
var dependencies = conf.devDependencies
var exists = fs.existsSync;

/**
 * Component name
 */

var name = process.argv.slice(3)[0]

if(name) create(name)
else {
  inquirer.prompt([
  {
    type: "input",
    name: "name",
    message: "name: "
  }, {
    type: "confirm",
    name: "material",
    message: "Use vomit material design?"
  }]).then(answers => create(answers.name))
}


/**
 * Create vomit component.
 *
 * @api private
 */

function create(name) {
  var dir = join('.', name)
  mkdir(dir)
  mkdir(dir + '/node_modules')
  mkdir(dir + '/node_modules/.bin')
  mkdir(dir + '/test')
  write(dir + '/test/' + name + '.js', test(name))
  write(dir + '/package.json', pkg(name))
  write(dir + '/index.js', index(name))
  write(dir + '/vomit.json', mock(name))
}


/**
 * Create package.json template.
 * @param {String} name
 * @return {String}
 * @api private
 */

function pkg(name) {
  return `{
  "name": "${name}",
  "main": "index.js",
  "scripts": {
    "start" : "./node_modules/.bin/vomit-live .",
    "test": "browserify test/*.js | tape-run",
    "build" : ""
  },
  "keywords": [
    "vomit-component",
    "component",
    "vomit"
  ],
  "devDependencies": {
    "browserify": "${dependencies.browserify}",
    "tape": "${dependencies.tape}",
    "tape-run": "${dependencies['tape-run']}",
    "vomit-live": "${conf.devDependencies['vomit-live']}"
  },
  "dependencies": {
    "vomit": "^${conf.version}"
  }
}`
}


/**
 * Create index.js template.
 * @param {String} name
 * @return {String}
 * @api private
 */

function index(name) {
  return `/**
 * Component dependencies.
 */
 var vomit = require('vomit')
 /**
  * Expose ${name} component
  *
  * @param {Object} data
  * @api public
  */
 module.exports = function(data) {
   return vomit\`<div class="component">
     <button aria-expanded="\${!data.expanded}">\${data.label}</button>
     <ul aria-hidden="\${data.expanded}">
       \${data.rainbow.map(color => vomit\`<li>\${color}</li>\`)}
     </ul>
   </div>\`
 }`
}


function test(name) {
  return `/**
 * Test dependencies.
 */
var test = require('tape')
var component = require('..')
test('component ${name} is a function', assert => {
  assert.plan(1)
  assert.equal(typeof component, 'function')
})
  `
}

/**
 * Create style template.
 * @param {String} name
 * @return {String}
 * @api private
 */

function styles(name) {
  return `button {
  background: whitesmoke;
  padding: 10px 16px;
  border: 2px solid black;
  box-shadow" 0 0 6px #ccc;
}`
}

/**
 * Create data to test component.
 *
 * @param {String} name
 * @api private
 */

function mock(name) {
  return `{
  "label" : "${name} component",
  "expanded" : true,
  "rainbow" : [
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "purple"
  ]
}
  `
}


/**
 * Create file.
 *
 * @param {String} path
 * @param {String} content
 * @api public
 */

function write(path, content) {
  if (exists(path)) {
    console.log(chalk.yellow('exists :'), relative('.', path))
  } else {
    console.log(chalk.blue('create :'), relative('.', path));
    var writer = fs.createWriteStream(path)
    writer.write(content)
    writer.end()
  }
}
